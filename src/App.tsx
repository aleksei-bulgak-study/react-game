import React, { ReactElement, useEffect, useState } from 'react';
import { HashRouter as Router, Route } from 'react-router-dom';
import { Switch, Redirect } from 'react-router';
import styled from 'styled-components';
import Layout from './layouts';
import Header from './components/Header';
import Footer from './components/Footer';
import {
    loadResultsFromStorage,
    loadSettingsFromStorage,
    storeResultsInStore,
    storeScoreInStore,
    storeSettingsInStore,
    storeStateInStore,
} from './utils';
import FullScreenButton from './components/FullScreenButton';
import { Settings } from 'settings';
import { Result } from 'result';
import AudioButton from './components/AudioButton';

type KeyValuePair = {
    key: string;
    value: number;
};

type AppProps = {
    className?: string;
    onThemeChange: (themeName: string) => void;
};

const onFullScreenPressed = () => {
    if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
    } else {
        document.exitFullscreen();
    }
};

const defaultSettings: Settings = { boardSize: 4, maxValue: 2048, elementsPerAction: 2, valuesAutoGenerated: [2, 4] };

const RefreshGame = () => {
    storeStateInStore([]);
    storeScoreInStore(0);
    
    return <Redirect to="/" />
};

const App: React.FC<AppProps> = ({ className, onThemeChange }): ReactElement => {
    const [settings, setSettings] = useState(loadSettingsFromStorage(defaultSettings));
    const [results, setResults] = useState(loadResultsFromStorage([] as Result[]));

    const onSettingsChange = ({ key, value }: KeyValuePair) => {
        setSettings((prevSettings) => ({ ...prevSettings, [key]: value }));
        storeStateInStore([]);
        storeScoreInStore(0);
    };

    useEffect(() => {
        storeSettingsInStore(settings);
    }, [settings]);

    useEffect(() => {
        storeResultsInStore(results);
    }, [results]);

    return (
        <Router>
            <Header />
            <main className={className}>
                <Switch>
                    <Route
                        exact
                        path="/play"
                        component={() => (
                            <Layout.GamePage
                                settings={settings}
                                onResultChange={setResults}
                            />
                        )}
                    />
                    <Route
                        exact
                        path="/settings"
                        component={() => (
                            <Layout.SettingsPage
                                onThemeChange={onThemeChange}
                                settings={settings}
                                onSettingsChange={onSettingsChange}
                            />
                        )}
                    />
                    <Route exact path="/score" component={() => <Layout.ScoreBoardPage results={results} />} />
                    <Route exact path="/refresh" component={RefreshGame}/>
                    <Redirect to={'/play'} />
                </Switch>
            </main>
            <Footer />
            <FullScreenButton onClick={onFullScreenPressed}  />
            <AudioButton />
        </Router>
    );
};

export default styled(App)`
    min-width: 1024px;

    min-height: 500px;
    flex-grow: 1;
    padding: 2rem;
    display: flex;

    @media (max-width: 1024px) {
        min-width: 500px;
        padding: 0;
    }

    & > * {
        flex-grow: 1;
    }
`;
